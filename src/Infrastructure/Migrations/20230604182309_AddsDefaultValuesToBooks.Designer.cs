// <auto-generated />
using System;
using ELibrary_BorrowingService.Infrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ELibrary_BorrowingService.Infrastructure.Migrations
{
    [DbContext(typeof(BookDbContext))]
    [Migration("20230604182309_AddsDefaultValuesToBooks")]
    partial class AddsDefaultValuesToBooks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("borrowingService")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ELibrary_BorrowingService.Domain.Entity.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaxBookingDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(15);

                    b.Property<int>("MaxBorrowDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30);

                    b.Property<int>("_availabieBooks")
                        .HasColumnType("integer")
                        .HasColumnName("AvailabieBooks");

                    b.Property<decimal>("_penaltyAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0.1m)
                        .HasColumnName("PenaltyAmount");

                    b.HasKey("Id");

                    b.ToTable("Book", "borrowingService");
                });

            modelBuilder.Entity("ELibrary_BorrowingService.Domain.Entity.BookingHistory", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("_bookingDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BookingDate");

                    b.Property<DateTime>("_bookingLimitDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BookingLimitDate");

                    b.Property<bool>("_isActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive");

                    b.Property<bool?>("_isSuccessful")
                        .HasColumnType("boolean")
                        .HasColumnName("IsSuccessful");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BookingHistory", "borrowingService");
                });

            modelBuilder.Entity("ELibrary_BorrowingService.Domain.Entity.BorrowingHistory", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("_borrowedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("BorrowedDate");

                    b.Property<DateTime?>("_returnedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ReturnedDate");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CustomerId");

                    b.ToTable("BorrowingHistory", "borrowingService");
                });

            modelBuilder.Entity("ELibrary_BorrowingService.Domain.Entity.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("_currentBookedBookNr")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentBookedBookNr");

                    b.Property<int>("_currentBorrowedBookNr")
                        .HasColumnType("integer")
                        .HasColumnName("CurrentBorrowedBookNr");

                    b.Property<bool>("_isAccountBlocked")
                        .HasColumnType("boolean")
                        .HasColumnName("IsAccountBlocked");

                    b.Property<int>("_maxBooksToBook")
                        .HasColumnType("integer")
                        .HasColumnName("MaxBooksToBook");

                    b.Property<int>("_maxBooksToBorrow")
                        .HasColumnType("integer")
                        .HasColumnName("MaxBooksToBorrow");

                    b.HasKey("Id");

                    b.ToTable("Customer", "borrowingService");
                });

            modelBuilder.Entity("ELibrary_BorrowingService.Domain.Entity.BookingHistory", b =>
                {
                    b.HasOne("ELibrary_BorrowingService.Domain.Entity.Book", "Book")
                        .WithMany("BookingHistory")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELibrary_BorrowingService.Domain.Entity.Customer", "Customer")
                        .WithMany("BookingHistory")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ELibrary_BorrowingService.Domain.Entity.BorrowingHistory", b =>
                {
                    b.HasOne("ELibrary_BorrowingService.Domain.Entity.Book", "Book")
                        .WithMany("BorrowingHistory")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ELibrary_BorrowingService.Domain.Entity.Customer", "Customer")
                        .WithMany("BorrowingHistory")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ELibrary_BorrowingService.Domain.Entity.Book", b =>
                {
                    b.Navigation("BookingHistory");

                    b.Navigation("BorrowingHistory");
                });

            modelBuilder.Entity("ELibrary_BorrowingService.Domain.Entity.Customer", b =>
                {
                    b.Navigation("BookingHistory");

                    b.Navigation("BorrowingHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
